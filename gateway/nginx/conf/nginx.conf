worker_processes 2;

events {
  worker_connections 1024;
}

http {
  access_log /dev/stdout combined;

  keepalive_timeout 65;
  resolver 8.8.8.8;

  lua_code_cache off;
  lua_package_path "$prefix/lualib/?.lua;;";

  lua_shared_dict locks 1M;
  lua_shared_dict cache 10M;

  # see https://github.com/openresty/lua-resty-core
  init_by_lua '
    require "resty.core"
  ';

  upstream jenkins {
    server jenkins:8080;
  }

  server {
    listen 8080;
    default_type text/html;

    location = / {
      lua_need_request_body on;

      access_by_lua '
        local str = require "resty.string"
        local expected_signature = ngx.req.get_headers()["X-Hub-Signature"]
        local body = ngx.req.get_body_data()

        if not body then
          ngx.header.content_type = "text/plain"
          ngx.status = ngx.HTTP_UNAUTHORIZED
          ngx.print(string.format("401 Unauthroized"))
          return
        end

        local actual_signature = "sha1=" .. str.to_hex(ngx.hmac_sha1("my-secret", body))
        ngx.log(ngx.DEBUG, string.format("expected: %s, actual: %s", expected_signature, actual_signature))

        -- luaはInterned Stringなので文字列同士の比較はTiming Atack的に問題ない
        if actual_signature ~= expected_signature then
          ngx.log(ngx.WARN, string.format("Invalid access detected: %s", actual_signature))
          ngx.header.content_type = "text/plain"
          ngx.status = ngx.HTTP_UNAUTHORIZED
          ngx.print(string.format("401 Unauthroized: ", actual_signature))
          return
        end
        ngx.log(ngx.INFO, "Authorized!")
      ';

      proxy_pass http://jenkins/;
    }
  }
}
